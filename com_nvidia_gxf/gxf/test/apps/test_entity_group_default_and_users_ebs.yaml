%YAML 1.2
# SPDX-FileCopyrightText: Copyright (c) 2023-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
dependencies:
- extension: StandardExtension
  uuid: 8ec2d5d6-b5df-48bf-8dee-0252606fdd7e
  version: 2.6.0
- extension: TestHelperExtension
  uuid: 1b99ffeb-c250-4ced-8117-62ac05969a50
  version: 2.6.0
- extension: SampleExtension
  uuid: a6ad78b6-1682-11ec-9621-0242ac130002
  version: 1.6.0
---
name: tx0
components:
- name: signal
  type: nvidia::gxf::test::MockTransmitter
- type: nvidia::gxf::DownstreamReceptiveSchedulingTerm
  parameters:
    transmitter: signal
    min_size: 1
- type: nvidia::gxf::PingTx
  name: ping_tx_c0
  parameters:
    signal: signal
- type: nvidia::gxf::CountSchedulingTerm
  parameters:
    count: 10
- type: nvidia::gxf::test::StepCount
  parameters:
    expected_count: 10
- name: cpu_thread
  type: nvidia::gxf::CPUThread
  parameters:
    pin_entity: true
---
name: rx0
components:
- name: signal
  type: nvidia::gxf::test::MockReceiver
- type: nvidia::gxf::MessageAvailableSchedulingTerm
  parameters:
    receiver: signal
    min_size: 1
- type: nvidia::gxf::PingRx
  name: ping_rx_c0
  parameters:
    signal: signal
- type: nvidia::gxf::test::StepCount
  parameters:
    expected_count: 10
- name: cpu_thread
  type: nvidia::gxf::CPUThread
  parameters:
    pin_entity: true
---
components:
- type: nvidia::gxf::Connection
  parameters:
    source: tx0/signal
    target: rx0/signal
---
name: tx1
components:
- name: signal
  type: nvidia::gxf::test::MockTransmitter
- type: nvidia::gxf::DownstreamReceptiveSchedulingTerm
  parameters:
    transmitter: signal
    min_size: 1
- type: nvidia::gxf::PingTx
  name: ping_tx_c1
  parameters:
    signal: signal
- type: nvidia::gxf::CountSchedulingTerm
  parameters:
    count: 10
- type: nvidia::gxf::test::StepCount
  parameters:
    expected_count: 10
- name: cpu_thread
  type: nvidia::gxf::CPUThread
  parameters:
    pin_entity: true
---
name: rx1
components:
- name: signal
  type: nvidia::gxf::test::MockReceiver
- type: nvidia::gxf::MessageAvailableSchedulingTerm
  parameters:
    receiver: signal
    min_size: 1
- type: nvidia::gxf::PingRx
  name: ping_rx_c1
  parameters:
    signal: signal
- type: nvidia::gxf::test::StepCount
  parameters:
    expected_count: 10
- name: cpu_thread
  type: nvidia::gxf::CPUThread
  parameters:
    pin_entity: true
---
components:
- type: nvidia::gxf::Connection
  parameters:
    source: tx1/signal
    target: rx1/signal
# Scheduler
---

name: scheduler
components:
- name: clock
  type: nvidia::gxf::RealtimeClock
- type: nvidia::gxf::EventBasedScheduler
  parameters:
    max_duration_ms: 10000
    clock: clock
    worker_thread_number: 2
    stop_on_deadlock: False
    stop_on_deadlock_timeout: 100
    # only applicable for MTS
    #check_recession_period_ms: 0.2
- type: nvidia::gxf::test::EntityMonitor
- type: nvidia::gxf::JobStatistics
  parameters:
    clock: clock

# Resources
# GPU
---
# only the first will be used by default EntityGroup
name: GPU_0
components:
- type: nvidia::gxf::GPUDevice
  name: GPU_0
  parameters:
    dev_id: 0
---
name: GPU_1
components:
- type: nvidia::gxf::GPUDevice
  name: GPU_1
  parameters:
    dev_id: 1
---
name: GPU_2
components:
- type: nvidia::gxf::GPUDevice
  name: GPU_2
  parameters:
    dev_id: 2
# CPU
---
# only the first will be used by default EntityGroup
name: CPU_0
components:
- name: ThP_0
  type: nvidia::gxf::ThreadPool
  parameters:
    initial_size: 1
---
name: CPU_1
components:
- name: ThP_1
  type: nvidia::gxf::ThreadPool
  parameters:
    initial_size: 1
---
name: CPU_2
components:
- name: ThP_2
  type: nvidia::gxf::ThreadPool
  parameters:
    initial_size: 1
# EntityGroup
---
EntityGroups:
- name: EG_0
  target:
  # - "tx0"  # stay in default EntityGroup
  - "tx1"  # overwrite from default EntityGroup to this EntityGroup
  - "GPU_1"
  - "CPU_1"
- name: EG_1
  target:
  # - "rx0"  # stay in default EntityGroup
  - "rx1"  # overwrite from default EntityGroup to this EntityGroup
  - "GPU_2"
  - "CPU_2"

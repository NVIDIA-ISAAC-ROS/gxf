%YAML 1.2
# SPDX-FileCopyrightText: Copyright (c) 2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
dependencies:
- extension: TestHelperExtension
  uuid: 1b99ffeb-c250-4ced-8117-62ac05969a50
  version: 2.3.0
---
interfaces:
- name: input
  target: codelet0/receiver
- name: output
  target: codelet2/transmitter
---
prerequisites:
- root_clock
# subgraph src: codelet0
---
name: codelet0
components:
- name: receiver
  type: nvidia::gxf::DoubleBufferReceiver
  parameters:
    capacity: 5
- type: nvidia::gxf::MessageAvailableSchedulingTerm
  parameters:
    receiver: receiver
    min_size: 1
- name: transmitter
  type: nvidia::gxf::DoubleBufferTransmitter
  parameters:
    capacity: 5
- type: nvidia::gxf::DownstreamReceptiveSchedulingTerm
  parameters:
    transmitter: transmitter
    min_size: 1
- name: mock_codelet0
  type: nvidia::gxf::test::MockCodelet
  parameters:
    clock: prerequisites/root_clock
    receiver: receiver
    transmitter: transmitter
    duration_lower_ms: 4
    duration_upper_ms: 5
- name: cpu_thread
  type: nvidia::gxf::CPUThread
  parameters:
    pin_entity: true
- type: nvidia::gxf::test::StepCount
  parameters:
    expected_count: 10
# codelet0 -> codelet1
---
components:
- type: nvidia::gxf::Connection
  parameters:
    source: codelet0/transmitter
    target: codelet1/receiver
# codelet1
---
name: codelet1
components:
- name: receiver
  type: nvidia::gxf::DoubleBufferReceiver
  parameters:
    capacity: 5
- type: nvidia::gxf::MessageAvailableSchedulingTerm
  parameters:
    receiver: receiver
    min_size: 1
- name: transmitter
  type: nvidia::gxf::DoubleBufferTransmitter
  parameters:
    capacity: 5
- type: nvidia::gxf::DownstreamReceptiveSchedulingTerm
  parameters:
    transmitter: transmitter
    min_size: 1
- name: mock_codelet1
  type: nvidia::gxf::test::MockCodelet
  parameters:
    clock: prerequisites/root_clock
    receiver: receiver
    transmitter: transmitter
    duration_lower_ms: 4
    duration_upper_ms: 5
- name: cpu_thread
  type: nvidia::gxf::CPUThread
  parameters:
    pin_entity: true
- type: nvidia::gxf::test::StepCount
  parameters:
    expected_count: 10
# codelet1 -> codelet2
---
components:
- type: nvidia::gxf::Connection
  parameters:
    source: codelet1/transmitter
    target: codelet2/receiver
# subgraph sink: codelet2
---
name: codelet2
components:
- name: receiver
  type: nvidia::gxf::DoubleBufferReceiver
  parameters:
    capacity: 5
- type: nvidia::gxf::MessageAvailableSchedulingTerm
  parameters:
    receiver: receiver
    min_size: 1
- name: transmitter
  type: nvidia::gxf::DoubleBufferTransmitter
  parameters:
    capacity: 5
- type: nvidia::gxf::DownstreamReceptiveSchedulingTerm
  parameters:
    transmitter: transmitter
    min_size: 1
- name: mock_codelet2
  type: nvidia::gxf::test::MockCodelet
  parameters:
    clock: prerequisites/root_clock
    receiver: receiver
    transmitter: transmitter
    duration_lower_ms: 5
    duration_upper_ms: 5
- type: nvidia::gxf::test::StepCount
  parameters:
    expected_count: 10
- name: cpu_thread
  type: nvidia::gxf::CPUThread
  parameters:
    pin_entity: true
# Resources
# CPU
---
# The first ThreadPool in root graph can overwrite it in default EntityGroup
name: subgraph_CPU_0
components:
- name: subgraph_ThP_0
  type: nvidia::gxf::ThreadPool
---
name: subgraph_CPU_1
components:
- name: subgraph_ThP_1
  type: nvidia::gxf::ThreadPool
---
name: subgraph_CPU_2
components:
- name: subgraph_ThP_2
  type: nvidia::gxf::ThreadPool
# EntityGroups
---
EntityGroups:
- name: subgraph_EG_0
  target:
  - "codelet0"
  - "subgraph_CPU_1"
- name: subgraph_EG_1
  target:
  - "codelet1"
  - "codelet2"  #  codelet2 to use subgraph_EG_1
  - "subgraph_CPU_2"
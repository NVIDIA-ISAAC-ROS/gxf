# SPDX-FileCopyrightText: Copyright (c) 2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

###### WARNING: This file has been adapted from CMake generated output.       ######
###### It is intended as a temporary workaround and will be removed in favor  ######
###### of first-class CMake support in the future.                            ######

# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 3.0)
   message(FATAL_ERROR "CMake >= 3.0.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "3.0.0")
   message(FATAL_ERROR "CMake >= 3.0.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 3.0.0...3.25)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_available_targets
  GXF::app
  GXF::behavior_tree
  GXF::common
  GXF::core
  GXF::core_c_api
  GXF::core_pybind
  GXF::core_static
  GXF::cuda
  GXF::cuda_test
  GXF::grpc
  GXF::gxe
  GXF::http
  GXF::logger
  GXF::multimedia
  GXF::network
  GXF::npp
  GXF::python_codelet
  GXF::sample
  GXF::serialization
  GXF::std
  GXF::std_static
  GXF::test_stream_sync_cuda
  GXF::test_extension
  GXF::ucx
)
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS ${_cmake_available_targets})
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

#----------------------------------------------------------------
# Always required components: common, core, std, gxe

add_library(GXF::logger SHARED IMPORTED)
set_target_properties(GXF::logger PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
)

# Create imported target GXF::common
add_library(GXF::common INTERFACE IMPORTED)
set_target_properties(GXF::common PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
  INTERFACE_LINK_LIBRARIES "GXF::logger;CUDA::nvtx3"
)

# Create imported target GXF::core_c_api
add_library(GXF::core_c_api INTERFACE IMPORTED)
set_target_properties(GXF::core_c_api PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
)

add_library(GXF::core_static STATIC IMPORTED)
set_target_properties(GXF::core_static PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
  INTERFACE_LINK_LIBRARIES "GXF::core_c_api;GXF::common;Threads::Threads;magic_enum::magic_enum;\$<LINK_ONLY:yaml-cpp>"
)

# Create imported target GXF::core
add_library(GXF::core SHARED IMPORTED)
set_target_properties(GXF::core PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
  INTERFACE_LINK_LIBRARIES "GXF::core_c_api;GXF::common;Threads::Threads;magic_enum::magic_enum;\$<LINK_ONLY:yaml-cpp>"
)

# Create imported target GXF::std_static
add_library(GXF::std_static STATIC IMPORTED)
set_target_properties(GXF::std_static PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
  INTERFACE_LINK_LIBRARIES "GXF::core;GXF::common;CUDA::cudart;CUDA::nvtx3;dlpack::dlpack;Threads::Threads;yaml-cpp"
)

# Create imported target GXF::std
add_library(GXF::std SHARED IMPORTED)
set_target_properties(GXF::std PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
  INTERFACE_LINK_LIBRARIES "GXF::core;GXF::common;CUDA::cudart;CUDA::nvtx3;dlpack::dlpack;Threads::Threads;yaml-cpp"
)

# Create imported target GXF::gxe
add_executable(GXF::gxe IMPORTED)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

#----------------------------------------------------------------
# Optional components
#
# Components with complex dependencies are manually enumerated so that
# they can be requested or omitted in the external project
# with `find_package(GXF COMPONENTS stream ucx ...)`

set(_extension_link_libraries "GXF::std;GXF::core;GXF::common")

add_library(GXF::behavior_tree SHARED IMPORTED)
set_target_properties(GXF::behavior_tree PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
  INTERFACE_LINK_LIBRARIES "${_extension_link_libraries}"
)

add_library(GXF::cuda SHARED IMPORTED)
set_target_properties(GXF::cuda PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
  INTERFACE_LINK_LIBRARIES "${_extension_link_libraries};CUDA::cudart"
)

add_library(GXF::cuda_test SHARED IMPORTED)
set_target_properties(GXF::cuda_test PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
  INTERFACE_LINK_LIBRARIES "${_extension_link_libraries};GXF::cuda;CUDA::cudart"
)

if(GXF_FIND_COMPONENTS AND ("app" IN_LIST GXF_FIND_COMPONENTS))
  add_library(GXF::app SHARED IMPORTED)
  set_target_properties(GXF::app PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
    INTERFACE_LINK_LIBRARIES "${_extension_link_libraries};GXF::sample;GXF::ucx;yaml-cpp"
  )
endif()

if(GXF_FIND_COMPONENTS AND ("grpc" IN_LIST GXF_FIND_COMPONENTS))
  add_library(GXF::grpc SHARED IMPORTED)
  set_target_properties(GXF::grpc PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
    INTERFACE_LINK_LIBRARIES "${_extension_link_libraries};gRPC::grpc++"
  )
endif()

if(GXF_FIND_COMPONENTS AND ("http" IN_LIST GXF_FIND_COMPONENTS))
  add_library(GXF::http SHARED IMPORTED)
  set_target_properties(GXF::http PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
    INTERFACE_LINK_LIBRARIES "${_extension_link_libraries};cpprestsdk::cpprest"
  )
endif()

add_library(GXF::multimedia SHARED IMPORTED)
set_target_properties(GXF::multimedia PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
  INTERFACE_LINK_LIBRARIES "${_extension_link_libraries}"
)

if(GXF_FIND_COMPONENTS AND ("network" IN_LIST GXF_FIND_COMPONENTS))
  add_library(GXF::network SHARED IMPORTED)
  set_target_properties(GXF::network PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
    INTERFACE_LINK_LIBRARIES "${_extension_link_libraries};GXF::serialization"
  )
endif()

if(GXF_FIND_COMPONENTS AND ("npp" IN_LIST GXF_FIND_COMPONENTS))
  add_library(GXF::npp SHARED IMPORTED)
  set_target_properties(GXF::npp PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
    INTERFACE_LINK_LIBRARIES "${_extension_link_libraries};CUDA::nppial;CUDA::nppidei"
  )
endif()

if(GXF_FIND_COMPONENTS AND ("python_codelet" IN_LIST GXF_FIND_COMPONENTS))
  add_library(GXF::python_codelet SHARED IMPORTED)
  set_target_properties(GXF::python_codelet PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
    INTERFACE_LINK_LIBRARIES "${_extension_link_libraries};GXF::cuda;pybind11::pybind11_headers;Python3::Python"
  )
endif()

add_library(GXF::rmm SHARED IMPORTED)
set_target_properties(GXF::rmm PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
  INTERFACE_LINK_LIBRARIES "${_extension_link_libraries};GXF::cuda;CUDA::cudart;rmm::rmm"
)

add_library(GXF::sample SHARED IMPORTED)
set_target_properties(GXF::sample PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
  INTERFACE_LINK_LIBRARIES "${_extension_link_libraries}"
)

if(GXF_FIND_COMPONENTS AND ("serialization" IN_LIST GXF_FIND_COMPONENTS))
  add_library(GXF::serialization SHARED IMPORTED)
  set_target_properties(GXF::serialization PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
    INTERFACE_LINK_LIBRARIES "${_extension_link_libraries};GXF::cuda"
  )
endif()

if(GXF_FIND_COMPONENTS AND ("stream" IN_LIST GXF_FIND_COMPONENTS))
  add_library(GXF::stream SHARED IMPORTED)
  set_target_properties(GXF::stream PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
    INTERFACE_LINK_LIBRARIES "${_extension_link_libraries};nvsci::nvsci"
  )
endif()

if(GXF_FIND_COMPONENTS AND ("test_stream_sync_cuda" IN_LIST GXF_FIND_COMPONENTS))
  add_library(GXF::test_stream_sync_cuda SHARED IMPORTED)
  set_target_properties(GXF::test_stream_sync_cuda PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
    INTERFACE_LINK_LIBRARIES "${_extension_link_libraries};GXF::cuda;GXF::stream;nvsci::nvsci"
  )
endif()

add_library(GXF::test_extension SHARED IMPORTED)
set_target_properties(GXF::test_extension PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
  INTERFACE_LINK_LIBRARIES "${_extension_link_libraries};yaml-cpp"
)

if(GXF_FIND_COMPONENTS AND ("ucx" IN_LIST GXF_FIND_COMPONENTS))
  add_library(GXF::ucx SHARED IMPORTED)
  set_target_properties(GXF::ucx PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}"
    INTERFACE_LINK_LIBRARIES "${_extension_link_libraries};GXF::multimedia;CUDA::cudart;ucx::ucs;ucx::ucp"
  )
endif()

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/GXFTargets-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
    if(NOT EXISTS "${_cmake_file}")
      message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)

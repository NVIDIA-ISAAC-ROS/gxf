// GXF Development Pipeline
//
// This will take care of building and doing basic tests for merge requests
// It will help to give developers faster feedback and for code reviewers
// to verify the compliance of the commit
//
// Copyright (c) 2021-2024, NVIDIA CORPORATION. All rights reserved.
//
// NVIDIA CORPORATION and its licensors retain all intellectual property
// and proprietary rights in and to this software, related documentation
// and any modifications thereto. Any use, reproduction, disclosure or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA CORPORATION is strictly prohibited.
@Library('ci-groovkins-lib@5049eebe095b22f589cf601c8c508feda21313b7')
import com.nvidia.isaac.ci.utils.WorkflowScriptUtil
import com.nvidia.isaac.ci.utils.dto.BaseCredentialsConfig
//  Pipeline specific configs
env.REPO_NAME = 'gxf'
String driver_version_cuda_12_6 = '560.35.03'
String driver_version_cuda_12_2 = '535.104.05'
String jetpack_version = 'jetpack60'
String jetpack_61_version = 'jetpack61'
String build_folder = 'engine/build'
String image_pull_secret = 'urm'
String artifactory_secret = 'vault-artifactory'
String enable_kaniko_cache = 'true'
String jp_tag = 'jp-6.0'
String jp_60_tag = 'jp-6.0 && 64GB'
String jp_61_tag = 'jp-6.1'
//  Base images
String base_image_12_2 = ''
String base_image_12_6 = ''
String base_image_arm = ''
String base_image_arm_61 = ''
//  Remote Execution configs
Boolean enable_re = false
String re_config = '--config=remote_exec_rpt'
//  Post section
Boolean enable_slack = true

def utils_credentials = BaseCredentialsConfig.from_default()
pipeline_utils = new WorkflowScriptUtil(this, utils_credentials)
blossom.init()
common.init()
gxf.init()
pipeline {
    agent none
    options {
        timeout(time: 3, unit: 'HOURS')
        parallelsAlwaysFailFast()
    }
    environment {
        ENABLE_LWS = 'false'
    }
    parameters {
        string(name: 'GERRIT_REFSPEC', defaultValue: 'refs/heads/master')
    }
    stages {
        stage('Environment Setup') { steps { script {
            blossom.run_container("${env.DOCKER_BASE}/gxf-development-build-checker:shared", image_pull_secret) {
                checkout scm
                blossom.add_safe_directory()
                common.get_commit_information()
                if (!enable_re) { re_config = '' }
                sh 'git apply --check release/patch/release_build.patch'
            }
        }}}
        stage('Build Base Images') {
            steps { script {
                parallel(
                'X86-CUDA-12.2': {
                    base_image_12_2 = "${env.DOCKER_BASE}/${env.IMAGE_PREFIX}-x86_64_cuda_12_2:${env.BUILD_NUMBER}-ci"
                    blossom.build_image("${build_folder}/docker/cuda12_2.dockerfile", build_folder, base_image_12_2, enable_kaniko_cache)
                },
                'X86-CUDA-12.6': {
                    base_image_12_6 = "${env.DOCKER_BASE}/${env.IMAGE_PREFIX}-x86_64_cuda_12_6:${env.BUILD_NUMBER}-ci"
                    blossom.build_image("${build_folder}/docker/cuda12_6.dockerfile", build_folder, base_image_12_6, enable_kaniko_cache)
                },
                'ARM-60': {
                    base_image_arm = "${env.DOCKER_BASE}/${env.IMAGE_PREFIX}-arm:${env.BUILD_NUMBER}-ci"
                    blossom.run_on_static_node(jp_tag) {
                        checkout scm
                        withCredentials([
                            usernamePassword(credentialsId: 'vault-ngc', usernameVariable: 'NGC_USERNAME', passwordVariable: 'NGC_PASSWORD'),
                            usernamePassword(credentialsId: 'vault-artifactory', usernameVariable: 'URM_USERNAME', passwordVariable: 'URM_PASSWORD')
                            ]) {
                            sh  "docker login -u '${NGC_USERNAME}' -p ${NGC_PASSWORD} nvcr.io"
                            sh "docker login -u '${URM_USERNAME}' -p ${URM_PASSWORD} urm.nvidia.com"
                        }
                        common.docker_login('vault-artifactory', 'urm.nvidia.com')
                        sh "docker build -t ${base_image_arm} -f ${build_folder}/docker/arm64/jp60.dockerfile ${build_folder} && docker push ${base_image_arm}"
                    }
                },
                'ARM-61': {
                    base_image_arm_61 = "${env.DOCKER_BASE}/${env.IMAGE_PREFIX}-arm61:${env.BUILD_NUMBER}-ci"
                    blossom.run_on_static_node(jp_tag) {
                        checkout scm
                        withCredentials([
                            usernamePassword(credentialsId: 'vault-ngc', usernameVariable: 'NGC_USERNAME', passwordVariable: 'NGC_PASSWORD'),
                            usernamePassword(credentialsId: 'vault-artifactory', usernameVariable: 'URM_USERNAME', passwordVariable: 'URM_PASSWORD')
                            ]) {
                            sh  "docker login -u '${NGC_USERNAME}' -p ${NGC_PASSWORD} nvcr.io"
                            sh "docker login -u '${URM_USERNAME}' -p ${URM_PASSWORD} urm.nvidia.com"
                        }
                        common.docker_login('vault-artifactory', 'urm.nvidia.com')
                        sh "docker build -t ${base_image_arm_61} -f ${build_folder}/docker/arm64/jp61.dockerfile ${build_folder} && docker push ${base_image_arm_61}"
                    }
                })
            }}
        }
        stage('Bazel') { steps { script {
            parallel(
            'Lint': {
                blossom.run_container(base_image_12_6, image_pull_secret) {
                    def cpu_cores = blossom.get_cpu_cores()
                    common.bazel_lint(re_config, cpu_cores)
                }
            },
            'Copyright-Check': {
                blossom.run_container(base_image_12_6, image_pull_secret) {
                    def cpu_cores = blossom.get_cpu_cores()
                    sh "git config --global --add safe.directory ${WORKSPACE}"
                    sh "echo ${WORKSPACE}"
                    pipeline_utils.enable_ssh() {
                        checkout scm
                        sh "bazel run //engine/build/style/copyright_checker:check_commit --local_cpu_resources=${cpu_cores} ${re_config} || { echo 'Copyright check failed. You can fix the format with `bazel run //engine/build/style/copyright_checker:check_commit -- --fix`'; exit 1; }"
                        }
                        }
                },
            'X86-CUDA-12.2': {
                blossom.run_container(base_image_12_2, image_pull_secret, driver_version_cuda_12_2) {
                    String config = '--config=x86_64_cuda_12_2'
                    def cpu_cores = blossom.get_cpu_cores()
                    common.bazel_build("${config} ${re_config}", cpu_cores)
                    common.bazel_test(config, cpu_cores)
                }
            },
            'X86-CUDA-12.6': {
                blossom.run_container(base_image_12_6, image_pull_secret, driver_version_cuda_12_6) {
                    String config = '--config=x86_64_cuda_12_6'
                    def cpu_cores = blossom.get_cpu_cores()
                    common.bazel_build("${config} ${re_config}", cpu_cores)
                    common.bazel_test(config, cpu_cores)
                }
            },
            'HP21EA_SBSA': {
                String config = '--config=hp21ea_sbsa'
                blossom.run_container(base_image_12_2, image_pull_secret) {
                    def cpu_cores = blossom.get_cpu_cores()
                    common.bazel_build("${config} ${re_config}", cpu_cores)
                }
            },
            'HP21GA_SBSA': {
                String config = '--config=hp21ga_sbsa'
                blossom.run_container(base_image_12_6, image_pull_secret) {
                    def cpu_cores = blossom.get_cpu_cores()
                    common.bazel_build("${config} ${re_config}", cpu_cores)
                }
            },
            'JETPACK60': {
                blossom.run_container(base_image_12_2, image_pull_secret) {
                    String config = '--config=jetpack60'
                    def cpu_cores = blossom.get_cpu_cores()
                    common.bazel_limit_cpu_usage(cpu_cores)
                    common.bazel_build("${config}", cpu_cores)
                    gxf.upload_tests('engine/build/scripts/build_upload_tests.sh', 'jetpack60', artifactory_secret)
                }
            },
            'JETPACK61': {
                blossom.run_container(base_image_12_6, image_pull_secret) {
                    String config = '--config=jetpack61'
                    def cpu_cores = blossom.get_cpu_cores()
                    common.bazel_limit_cpu_usage(cpu_cores)
                    common.bazel_build("${config}", cpu_cores)
                    gxf.upload_tests('engine/build/scripts/build_upload_tests.sh', 'jetpack61', artifactory_secret)
                }
            })
        }}}
        stage('Jetpack Tests') { steps { script {
            parallel(
            'JETPACK60': {
                blossom.run_on_static_node(jp_60_tag) {
                    checkout scm
                    gxf.run_tests_on_jetson(base_image_arm, jetpack_version, artifactory_secret, '')
                }
            },
            'JETPACK61': {
                blossom.run_on_static_node(jp_61_tag) {
                    checkout scm
                    gxf.run_tests_on_jetson(base_image_arm_61, jetpack_61_version, artifactory_secret, '')
                }
            })
        }}}
    }
    post { always { script { common.post_actions_dev(env.GERRIT_REFSPEC, enable_slack, env.GIT_AUTHOR, env.GIT_SHORT) } } }
}

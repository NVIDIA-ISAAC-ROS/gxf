"""
  SPDX-FileCopyrightText: Copyright (c) 2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
  SPDX-License-Identifier: Apache-2.0

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
"""
diff --git BUILD BUILD
index 65e0cdc..518cbbc 100644
--- BUILD
+++ BUILD
@@ -101,7 +101,8 @@ posix_copts = [
     "-Wwrite-strings",
     "-Wshadow",
     "-fno-common",
-
+    "-fvisibility=hidden",
+    "-Wno-stringop-overflow",
     # Modern build environments should be able to set this to use atomic
     # operations for reference counting rather than locks. However, it's
     # known not to work on some Android builds.
@@ -117,7 +118,7 @@ boringssl_copts = select({
         "-DWIN32_LEAN_AND_MEAN",
         "-DOPENSSL_NO_ASM",
     ],
-    "//conditions:default": ["-DOPENSSL_NO_ASM"],
+    "//conditions:default": ["-DOPENSSL_NO_ASM", "-fvisibility=hidden","-Wno-stringop-overflow"],
 })

 crypto_sources_asm = select({
@@ -134,6 +135,7 @@ posix_copts_c11 = [
     "-Wmissing-prototypes",
     "-Wold-style-definition",
     "-Wstrict-prototypes",
+    "-fvisibility=hidden",
 ]

 boringssl_copts_c11 = boringssl_copts + select({
@@ -141,13 +143,18 @@ boringssl_copts_c11 = boringssl_copts + select({
     ":linux_ppc64le": posix_copts_c11,
     ":linux_x86_64": posix_copts_c11,
     ":mac_x86_64": posix_copts_c11,
-    "//conditions:default": [],
+    "//conditions:default": [
+                             "-fvisibility=hidden",
+                             "-Wno-stringop-overflow",
+                            ],
 })

 # For C++ targets only (not C), compile with C++11 support.
 posix_copts_cxx = [
     "-std=c++11",
     "-Wmissing-declarations",
+    "-fvisibility=hidden",
+    "-fvisibility-inlines-hidden",
 ]

 boringssl_copts_cxx = boringssl_copts + select({
@@ -155,7 +162,10 @@ boringssl_copts_cxx = boringssl_copts + select({
     ":linux_ppc64le": posix_copts_cxx,
     ":linux_x86_64": posix_copts_cxx,
     ":mac_x86_64": posix_copts_cxx,
-    "//conditions:default": [],
+    "//conditions:default": [
+                             "-fvisibility=hidden",
+                             "-fvisibility-inlines-hidden",
+                            ],
 })

 cc_library(
